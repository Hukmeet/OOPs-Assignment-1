public class R25_String_Class_Methods {
    public static void main(String[] args) {
        String str="Sample String";
        String str1="Hello";
        String str2="Jello";
        String str3="hello";
        String str4="  White Spaces  ";
        String str5="A.B.C.D.E.F.G";
        int num = 123;
        System.out.println("\n\t\t\t\tAll Methods of String Class:\n\n");
        System.out.println("-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
        System.out.println("\n\t\t\tMethods of String Class for Getting Information:\n\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n1. length() method: \n");
        System.out.println("\tDescription: \n\t\tReturns the number of characters in the string.\n");
        System.out.println("\tPrototype: public int length()\n");
        System.out.println("\tSyntax: int <varName> = <str>.length(); \n\t\t<varName>: The int variable to store the length.\n\t\t<str>: The String object.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tLength of str is: ");
        int len=str.length();
        System.out.println(len+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n2. charAt() method: \n");
        System.out.println("\tDescription: \n\t\tReturns the character at the specified index.\n\t\t(Remember that string indices start at 0.)\n");
        System.out.println("\tPrototype: public char charAt(int index)\n");
        System.out.println("\tSyntax: char <varName> = <str>.charAt(<index>); \n\t\t<varName>: The char variable to store the character.\n\t\t<str>: The String object.\n\t\t<index>: The int position (0-based) of the character.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tCharacter at index 5 of str is: ");
        char ch=str.charAt(5);
        System.out.println(ch+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n3. indexOf() method: \n");
        System.out.println("\tDescription: \n\t\tReturns the index of the first occurrence of a character or substring.\n");
        System.out.println("\tPrototypes: \n\t\ti.) public int indexOf(int ch)\n\t\tii.) public int indexOf(String str)\n");
        System.out.println("\tSyntax: int <varName> = <str_search>.indexOf(<target>); \n\t\t<varName>: The int variable for the index. Becomes -1 if not found. \n\t\t<str_search>: The string to search within.\n\t\t<target>: The character or string to search for.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tIndex of 'a' in str is: ");
        int index=str.indexOf('a');
        System.out.println(index+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n4. lastIndexOf() method: \n");
        System.out.println("\tDescription: \n\t\tReturns the index of the last occurrence of a character or substring.\n");
        System.out.println("\tPrototypes: \n\t\ti.) public int lastIndexOf(int ch)\n\t\tii.) public int lastIndexOf(String str)\n");
        System.out.println("\tSyntax: int <varName> = <str_search>.lastIndexOf(<target>); \n\t\t<varName>: The int variable for the index. \n\t\t<str_search>: The string to search within.\n\t\t<target>: The character or string to search for.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tLat index of 'S' in str is: ");
        int last_index=str.lastIndexOf('S');
        System.out.println(last_index+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n5. contains() method: \n");
        System.out.println("\tDescription: \n\t\tChecks if the string contains a specified character sequence.\n");
        System.out.println("\tPrototype: public boolean contains(CharSequence s)\n");
        System.out.println("\tSyntax: boolean <varName> = <str>.contains(<sequence>); \n\t\t<varName>:The boolean variable to store the result. \n\t\t<str>: The string object to search within.\n\t\t<sequence>: The CharSequence (e.g., another String) to find.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tThe fact that str contains \"String\" is: ");
        boolean contain=str.contains("String");
        System.out.println(contain+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n.6 isEmpty() method: \n");
        System.out.println("\tDescription: \n\t\tChecks if the string has a length of 0.\n");
        System.out.println("\tPrototype: public boolean isEmpty()\n");
        System.out.println("\tSyntax: boolean <varName> = <str>.isEmpty(); \n\t\t<varName>: The boolean variable for the result. \n\t\t<str>: The String object.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tIs str empty? : ");
        boolean empt=str.isEmpty();
        System.out.println(empt+"\n");
        System.out.println("-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
        System.out.println("\n\t\t\tMethods of String Class for Doing Comparison:\n\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n1. equals() method: \n");
        System.out.println("\tDescription: \n\t\tCompares two strings for content equality (case-sensitive).\n");
        System.out.println("\tPrototype: public boolean equals(Object anObject)\n");
        System.out.println("\tSyntax: boolean <varName> = <str1>.equals(<str2>); \n\t\t<varName>: The boolean variable for the result. \n\t\t<str1>: The first String.\n\t\t<str2>: The second String.\n");
        System.out.print("\tExample: \n\t\tstr1 = \""+str1+"\"\n\t\tstr2 = \""+str2+"\"\n\t\tstr1.equals(str2) gives: ");
        boolean eq=str1.equals(str2);
        System.out.println(eq+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n2. equalsIgnoreCase() method: \n");
        System.out.println("\tDescription: \n\t\tCompares two strings for content equality, ignoring case.\n");
        System.out.println("\tPrototype: public boolean equalsIgnoreCase(String anotherString)\n");
        System.out.println("\tSyntax: boolean <varName> = <str1>.equalsIgnoreCase(<str2>); \n\t\t<varName>: The boolean variable for the result. \n\t\t<str1>: The first String.\n\t\t<str2>: The second String.\n");
        System.out.print("\tExample: \n\t\tstr1 = \""+str1+"\"\n\t\tstr3 = \""+str3+"\"\n\t\tstr1.equalsIgnoreCase(str3) gives: ");
        boolean eqNoCase=str1.equalsIgnoreCase(str3);
        System.out.println(eqNoCase+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n3. compareTo() method: \n");
        System.out.println("\tDescription: \n\t\tCompares strings lexicographically. Returns a negative integer if the string is less than the argument, zero if they are equal, and a positive integer if it's greater.\n");
        System.out.println("\tPrototype: public int compareTo(String anotherString)\n");
        System.out.println("\tSyntax: int <varName> = <str1>.compareTo(<str2>); \n\t\t<varName>: The int variable for the result. \n\t\t<str1>: The first String.\n\t\t<str2>: The second String.\n");
        System.out.print("\tExample: \n\t\tstr1 = \""+str1+"\"\n\t\tstr2 = \""+str2+"\"\n\t\tstr1.compareTo(str2) gives: ");
        int compare=str1.compareTo(str2);
        System.out.println(compare+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n4. startsWith() method: \n");
        System.out.println("\tDescription: \n\t\tChecks if the string starts with a specified prefix.\n");
        System.out.println("\tPrototype: public boolean startsWith(String prefix)\n");
        System.out.println("\tSyntax: boolean <varName> = <str>.startsWith(<prefix>); \n\t\t<varName>: The boolean variable for the result. \n\t\t<str>: The String to be checked.\n\t\t<prefix: The string to compare against.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tDoes str start with \"Sam\"? : ");
        boolean stwth=str.startsWith("Sam");
        System.out.println(stwth+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n5. endsWith() method: \n");
        System.out.println("\tDescription: \n\t\tChecks if the string ends with a specified suffix.\n");
        System.out.println("\tPrototype: public boolean endsWith(String suffix)\n");
        System.out.println("\tSyntax: boolean <varName> = <str>.endsWith(<suffix>); \n\t\t<varName>: The boolean variable for the result. \n\t\t<str>: The String to be checked.\n\t\t<suffix: The string to compare against.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tDoes str end with \"ing\"? : ");
        boolean enwth=str.endsWith("ing");
        System.out.println(enwth+"\n");
        System.out.println("-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
        System.out.println("\n\t\tMethods of String Class for Manipulation and Transformation:\n\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n1. concat() method: \n");
        System.out.println("\tDescription: \n\t\tAppends a specified string to the end of another string.\n");
        System.out.println("\tPrototype: public String concat(String str)\n");
        System.out.println("\tSyntax: String <varName> = <str1>.concat(<str2>); \n\t\t<varName>: The new String variable. \n\t\t<str1>: The initial string.\n\t\t<str2>: The string to be appended.\n");
        System.out.print("\tExample: \n\t\tstr1 = \""+str1+"\"\n\t\tstr2 = \""+str2+"\"\n\t\tstr1.concat(str2) gives: ");
        String conc=str1.concat(str2);
        System.out.println(conc+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n2. substring() method: \n");
        System.out.println("\tDescription: \n\t\tExtracts a substring from a string.\n");
        System.out.println("\tPrototypes: \n\t\ti.) public String substring(int beginIndex)\n\t\tii.) public String substring(int beginIndex, int endIndex)\n");
        System.out.println("\tSyntax (with one parameter): String <varName> = <str>.substring(<beginIndex>); \n\t\t<varName>: The new String variable. \n\t\t<str>: The initial string.\n\t\t<beginIndex>: The starting index (inclusive).\n");
        System.out.println("\tSyntax (with two parameters): String <varName> = <str>.substring(<beginIndex>, <endIndex>); \n\t\t<varName>: The new String variable. \n\t\t<str>: The initial string.\n\t\t<beginIndex>: The starting index (inclusive).\n\t\t<endIndex>: The ending index (exclusive).\n");
        System.out.print("\tExample 1: \n\t\tstr = \""+str+"\"\n\t\tstr.substring(5) gives: ");
        String sub1=str.substring(5);
        System.out.println(sub1+"\n");
        System.out.print("\tExample 2: \n\t\tstr = \""+str+"\"\n\t\tstr.substring(5,9) gives: ");
        String sub2=str.substring(5,9);
        System.out.println(sub2+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n3. replace() method: \n");
        System.out.println("\tDescription: \n\t\tReplaces all occurrences of a character or sequence.\n");
        System.out.println("\tPrototypes: \n\t\ti.) public String replace(char oldChar, char newChar)\n\t\tii.) public String replace(CharSequence target, CharSequence replacement)\n");
        System.out.println("\tSyntax: String <varName> = <str>.replace(<old_target>, <new_target>); \n\t\t<varName>: The new String with replacements. \n\t\t<str>: The original string.\n\t\t<old_target>: The character or sequence to be replaced. \n\t\t<new_target>: The character or sequence to replace with.\n");
        System.out.print("\tExample: \n\t\tstr2 = \""+str2+"\"\n\t\tstr2.replace('J','H') gives: ");
        String rep = str2.replace('J','H');
        System.out.println(rep+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n4. trim() method: \n");
        System.out.println("\tDescription: \n\t\tReturns a new string with leading and trailing whitespace removed.\n");
        System.out.println("\tPrototype: public String trim()\n");
        System.out.println("\tSyntax: String <varName> = <str>.trim(); \n\t\t<varName>: The new String variable. \n\t\t<str>: The original string.\n");
        System.out.print("\tExample: \n\t\tstr4 = \""+str4+"\"\n\t\tstr4.trim() gives: ");
        String trm=str4.trim();
        System.out.println(trm+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n5. toLowerCase() method: \n");
        System.out.println("\tDescription: \n\t\tConverts all characters to lowercase.\n");
        System.out.println("\tPrototype: public String toLowerCase()\n");
        System.out.println("\tSyntax: String <varName> = <str>.toLowerCase(); \n\t\t<varName>: <varName>: The new String variable. \n\t\t<str>: The original string.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tDoes str in lower case looks like : ");
        String lw=str.toLowerCase();
        System.out.println(lw+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n6. toUpperCase() method: \n");
        System.out.println("\tDescription: \n\t\tConverts all characters to uppercase.\n");
        System.out.println("\tPrototype: public String toUpperCase()\n");
        System.out.println("\tSyntax: String <varName> = <str>.toUpperCase(); \n\t\t<varName>: <varName>: The new String variable. \n\t\t<str>: The original string.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tDoes str in upper case looks like : ");
        String up=str.toUpperCase();
        System.out.println(up+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n7. split() method: \n");
        System.out.println("\tDescription: \n\t\tSplits the string into a string array based on a regular expression delimiter.\n");
        System.out.println("\tPrototype: public String[] split(String regex)\n");
        System.out.println("\tSyntax: String[] <varName> = <str>.split(<regex>); \n\t\t<varName>: The String array to hold the result. \n\t\t<str>: The initial string.\n\t\t<regex>: The String delimiter (e.g., a comma ,).\n");
        System.out.print("\tExample: \n\t\tstr5 = \""+str5+"\"\n\t\tstr5.split(\".\") gives: ");
        String[] spl=str5.split("\\.");
        System.out.print("{");
        for (int i=0;i<spl.length-1;i++)
            System.out.print("\""+spl[i]+ "\", ");
        System.out.print("\""+spl[spl.length-1]+ "\"}\n");
        System.out.println("-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
        System.out.println("\n\t\t\tMethods of String Class for Conversion:\n\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n1. toCharArray() method: \n");
        System.out.println("\tDescription: \n\t\tConverts the string into a new character array.\n");
        System.out.println("\tPrototype: public char[] toCharArray()\n");
        System.out.println("\tSyntax: char[] <varName> = <str>.toCharArray(); \n\t\t<varName>: The char array to store the result. \n\t\t<str>: The original string.\n");
        System.out.print("\tExample: \n\t\tstr = \""+str+"\"\n\t\tstr.toCharArray() gives: ");
        char[] charr=str.toCharArray();
        System.out.print("{");
        for (int i=0;i<charr.length-1;i++)
            System.out.print("'"+charr[i]+ "', ");
        System.out.print("'"+charr[charr.length-1]+ "'}\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n2. valueOf() method: \n");
        System.out.println("\tDescription: \n\t\tConverts various data types into a string representation.\n");
        System.out.println("\tPrototypes: \n\t\ti.) public static String valueOf(int i)\n\t\tii.) public static String valueOf(double d)\n\t\tiii.) public static String valueOf(boolean b)\n");
        System.out.println("\tSyntax: String <varName> = String.valueOf(<value>); \n\t\t<varName>: The new String variable. \n\t\t<value>: The variable or literal to be converted.\n");
        System.out.print("\tExample: \n\t\tint num = "+num+";\n\t\tString.valueOf(num) gives: ");
        String val = String.valueOf(num);
        System.out.println(val+"\n");
        System.out.println("-------------------------------------------------------------------------------------");
        System.out.println("\n\n3. join() method: \n");
        System.out.println("\tDescription: \n\t\tJoins multiple strings with a specified delimiter.\n");
        System.out.println("\tPrototype: public static String join(CharSequence delimiter, CharSequence... elements)\n");
        System.out.println("\tSyntax: String <varName> = String.join(<delimiter>, <element1>, <element2>, ...); \n\t\t<varName>: The new String variable. \n\t\t<delimiter>: The String to place between each element.\n\t\t<elements>: The strings to be joined.\n");
        System.out.print("\tExample: \n\t\tString.join(\" \", \"Hello\", \"World\") gives: ");
        String joined = String.join(" ", "Hello", "World");
        System.out.println(joined + "\n");
        System.out.println("-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
    }
}