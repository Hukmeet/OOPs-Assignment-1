import java.util.Arrays;
public class R28_Array_Class_Methods {
    public static void main(String[] args) {
        int[] arr1 = {10, 2, 8, 5, 1};
        int[] arr2 = {1, 2, 5, 8, 10};
        int[] arr3 = {1, 2, 5, 8, 10};
        int[] arr4 = {1, 2, 5, 8, 9};
        int[][] arr5 = {{1, 2}, {3, 4}};
        int[][] arr6 = {{1, 2}, {3, 4}};
        int[][] arr7 = {{1, 2}, {3, 5}};
        System.out.println("\n\t\t\t\tAll Methods of Arrays Class:");
        System.out.println("\n-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
        System.out.println("\n\t\t\tMethods of Arrays Class for Sorting & Searching:\n\n");
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n1. sort() method: \n");
        System.out.println("\tDescription: \n\t\tSorts the specified array into ascending numerical order.\n");
        System.out.println("\tPrototype: public static void sort(int[] a)\n");
        System.out.println("\tSyntax: Arrays.sort(<arrayName>);\n");
        System.out.println("\twhere,\n\t\t<arrayName> is the name of the array to be sorted.\n");
        System.out.print("\tExample: \n\t\tBefore sorting: ");
        System.out.println(Arrays.toString(arr1));
        Arrays.sort(arr1);
        System.out.print("\t\tAfter sorting: ");
        System.out.println(Arrays.toString(arr1));
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n2. binarySearch() method: \n");
        System.out.println("\tDescription: \n\t\tSearches the specified array for a value using the binary search algorithm. \n\t\t(NOTE: The array must be sorted first.)\n");
        System.out.println("\tPrototype: public static int binarySearch(int[] a, int key)\n");
        System.out.println("\tSyntax: int <varName> = Arrays.binarySearch(<sortedArray>, <value>);\n");
        System.out.println("\twhere,\n\t\t<varName> is the name of the variable to store the result.\n\t\t<sortedArray> is the sorted array to be searched.\n\t\t<value> is the element to be searched for.\n");
        System.out.println("\tExample: \n\t\tUsing the sorted arr2: " + Arrays.toString(arr2));
        int searchIndex1 = Arrays.binarySearch(arr2, 8);
        System.out.println("\t\tIndex of value 8 is: " + searchIndex1);
        int searchIndex2 = Arrays.binarySearch(arr2, 99);
        System.out.println("\t\tIndex of value 99 is: " + searchIndex2 + " (negative indicates not found)\n");
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n3. parallelSort() method: \n");
        System.out.println("\tDescription: \n\t\tSorts the specified array in parallel. \n\t\tIt uses multiple processors for faster performance on large arrays.\n");
        System.out.println("\tPrototype: public static void parallelSort(int[] a)\n");
        System.out.println("\tSyntax: Arrays.parallelSort(<arrayName>);\n");
        System.out.println("\twhere,\n\t\t<arrayName> is the name of the array to be sorted.\n");
        int[] largeArray = {99, 5, 20, 15, 1, 88, 45, 60};
        System.out.print("\tExample: \n\t\tBefore parallel sort: ");
        System.out.println(Arrays.toString(largeArray));
        Arrays.parallelSort(largeArray);
        System.out.print("\t\tAfter parallel sort: ");
        System.out.println(Arrays.toString(largeArray));
        System.out.println("\n\n-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
        System.out.println("\n\t\t\tMethods of Arrays Class for Comparison & Equality:\n\n");
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n1. equals() method: \n");
        System.out.println("\tDescription: \n\t\tCompares two arrays for equality. \n\t\tReturns true if they are of the same length and contain the same elements in the same order.\n");
        System.out.println("\tPrototype: public static boolean equals(int[] a, int[] a2)\n");
        System.out.println("\tSyntax: boolean <varName> = Arrays.equals(<array1>, <array2>);\n");
        System.out.println("\twhere,\n\t\t<varName> is the name of the boolean variable to store the result.\n\t\t<array1> is the first array to be compared.\n\t\t<array2> is the second array to be compared.\n");
        System.out.println("\tExample: ");
        boolean isEqual1 = Arrays.equals(arr2, arr3);
        System.out.println("\t\t" + Arrays.toString(arr2) + " equals " + Arrays.toString(arr3) + " is: " + isEqual1);
        boolean isEqual2 = Arrays.equals(arr2, arr4);
        System.out.println("\t\t" + Arrays.toString(arr2) + " equals " + Arrays.toString(arr4) + " is: " + isEqual2);
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n2. deepEquals() method: \n");
        System.out.println("\tDescription: \n\t\tCompares two arrays for deep equality. \n\t\tThis is useful for multi-dimensional arrays or arrays of arrays.\n");
        System.out.println("\tPrototype: public static boolean deepEquals(Object[] a1, Object[] a2)\n");
        System.out.println("\tSyntax: boolean <varName> = Arrays.deepEquals(<array1>, <array2>);\n");
        System.out.println("\twhere,\n\t\t<varName> is the name of the boolean variable to store the result.\n\t\t<array1> is the first array to be compared.\n\t\t<array2> is the second array to be compared.\n");
        System.out.println("\tExample: \n\t\tComparing nested arrays: ");
        boolean isDeepEqual1 = Arrays.deepEquals(arr5, arr6);
        System.out.println("\t\tArrays.deepEquals(arr5, arr6) is: " + isDeepEqual1);
        boolean isDeepEqual2 = Arrays.deepEquals(arr5, arr7);
        System.out.println("\t\tArrays.deepEquals(arr5, arr7) is: " + isDeepEqual2);
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n3. compare() method: \n");
        System.out.println("\tDescription: \n\t\tLexicographically compares two arrays. \n\t\tReturns a negative, zero, or positive value.\n");
        System.out.println("\tPrototype: public static int compare(int[] a, int[] b)\n");
        System.out.println("\tSyntax: int <varName> = Arrays.compare(<array1>, <array2>);\n");
        System.out.println("\twhere,\n\t\t<varName> is the name of the int variable to store the result.\n\t\t<array1> is the first array to be compared.\n\t\t<array2> is the second array to be compared.\n");
        System.out.println("\tExample: ");
        int compareResult1 = Arrays.compare(arr2, arr3);
        System.out.println("\t\t" + Arrays.toString(arr2) + " compared to " + Arrays.toString(arr3) + " is: " + compareResult1 + " (0 for equality)");
        int compareResult2 = Arrays.compare(arr2, arr4);
        System.out.println("\t\t" + Arrays.toString(arr2) + " compared to " + Arrays.toString(arr4) + " is: " + compareResult2 + " (non-zero for difference)");
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n4. mismatch() method: \n");
        System.out.println("\tDescription: \n\t\tFinds and returns the index of the first mismatch between two arrays. \n\t\tReturns -1 if they are identical.\n");
        System.out.println("\tPrototype: public static int mismatch(int[] a, int[] b)\n");
        System.out.println("\tSyntax: int <varName> = Arrays.mismatch(<array1>, <array2>);\n");
        System.out.println("\twhere,\n\t\t<varName> is the name of the int variable to store the result.\n\t\t<array1> is the first array to be compared.\n\t\t<array2> is the second array to be compared.\n");
        int mismatchIndex1 = Arrays.mismatch(arr2, arr3);
        System.out.println("\t\tArrays.mismatch(arr2, arr3) is: " + mismatchIndex1);
        int mismatchIndex2 = Arrays.mismatch(arr2, arr4);
        System.out.println("\t\tArrays.mismatch(arr2, arr4) is: " + mismatchIndex2);
        System.out.println("\n\n-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
        System.out.println("\n\t\t\tMethods of Arrays Class for Manipulation & Copying:\n\n");
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n1. fill() method: \n");
        System.out.println("\tDescription: \n\t\tAssigns the specified value to each element of the array.\n");
        System.out.println("\tPrototype: public static void fill(int[] a, int val)\n");
        System.out.println("\tSyntax: Arrays.fill(<arrayName>, <value>);\n");
        System.out.println("\twhere,\n\t\t<arrayName> is the array to be filled.\n\t\t<value> is the value to assign to all elements.\n");
        int[] fillArray = new int[5];
        System.out.println("\tExample: \n\t\tBefore fill(): " + Arrays.toString(fillArray));
        Arrays.fill(fillArray, 7);
        System.out.println("\t\tAfter fill(7): " + Arrays.toString(fillArray));
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n2. copyOf() method: \n");
        System.out.println("\tDescription: \n\t\tCopies the specified array, truncating or padding with zeros \n\t\tto make the copy have the specified length.\n");
        System.out.println("\tPrototype: public static int[] copyOf(int[] original, int newLength)\n");
        System.out.println("\tSyntax: int[] <newArray> = Arrays.copyOf(<originalArray>, <newLength>);\n");
        System.out.println("\twhere,\n\t\t<newArray> is the name of the new array to be created.\n\t\t<originalArray> is the array to be copied.\n\t\t<newLength> is the length of the new array.\n");
        System.out.println("\tExample: \n\t\tOriginal array: " + Arrays.toString(arr2));
        int[] copiedArray = Arrays.copyOf(arr2, 3);
        System.out.println("\t\tCopied array with length 3: " + Arrays.toString(copiedArray));
        int[] extendedArray = Arrays.copyOf(arr2, 7);
        System.out.println("\t\tCopied array with length 7: " + Arrays.toString(extendedArray));
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n3. copyOfRange() method: \n");
        System.out.println("\tDescription: \n\t\tCopies the specified range of the specified array into a new array.\n");
        System.out.println("\tPrototype: public static int[] copyOfRange(int[] original, int from, int to)\n");
        System.out.println("\tSyntax: int[] <newArray> = Arrays.copyOfRange(<originalArray>, <startIndex>, <endIndex>);\n");
        System.out.println("\twhere,\n\t\t<newArray> is the name of the new array to be created.\n\t\t<originalArray> is the array to be copied.\n\t\t<startIndex> is the starting index of the range (inclusive).\n\t\t<endIndex> is the end index of the range (exclusive).\n");
        System.out.println("\tExample: \n\t\tOriginal array: " + Arrays.toString(arr2));
        int[] rangeArray = Arrays.copyOfRange(arr2, 1, 4);
        System.out.println("\t\tCopied range from index 1 to 4 (exclusive): " + Arrays.toString(rangeArray));
        System.out.println("\n\n-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
        System.out.println("\n\t\t\tMethods of Arrays Class for Conversion:\n\n");
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n1. toString() method: \n");
        System.out.println("\tDescription: \n\t\tReturns a string representation of the contents of the specified array.\n");
        System.out.println("\tPrototype: public static String toString(int[] a)\n");
        System.out.println("\tSyntax: String <varName> = Arrays.toString(<arrayName>);\n");
        System.out.println("\twhere,\n\t\t<varName> is the name of the variable to store the result.\n\t\t<arrayName> is the array to be converted to a String.\n");
        System.out.print("\tExample: \n\t\tarr1 = ");
        System.out.println(Arrays.toString(arr1));
        System.out.println("\n-------------------------------------------------------------------------------------");
        System.out.println("\n\n2. deepToString() method: \n");
        System.out.println("\tDescription: \n\t\tReturns a string representation of the 'deep' contents of the specified array. \n\t\tThis method is useful for multi-dimensional arrays.\n");
        System.out.println("\tPrototype: public static String deepToString(Object[] a)\n");
        System.out.println("\tSyntax: String <varName> = Arrays.deepToString(<arrayName>);\n");
        System.out.println("\twhere,\n\t\t<varName> is the name of the variable to store the result.\n\t\t<arrayName> is the array to be converted to a String.\n");
        System.out.print("\tExample: \n\t\tUsing arr5: ");
        System.out.println(Arrays.deepToString(arr5));
        System.out.println("\n-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-");
    }
}